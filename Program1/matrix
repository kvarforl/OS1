#!/bin/bash -e

#MATH HINTS:
#i = $((9+9))
#((i++))

#USAGE
# matrix operation m1 m2
# operation = ${1}
# m1file = ${2}
# m2file = ${3}

#validate matrix:
# -- ${2} is valid file ( use test ??)
# -- OR stdin provides input
# -- otherwise error and exit

#STORE MATRIX 
#cat <file> | mapfile <arrname>

#ACCESS ELEM IN MATRIX
#ind = (numcols * row) + col
#echo ${<arrname>[@]} | cut -d " " -f $ind

#USAGE: pass <row indice> <col indice> to set entryM1 (indexed at 1 !!) 
function getFromM1()
{
    rowInd=$(( ${1} - 1 ))
    accessInd=$((m1cols * $rowInd + ${2}))
    entryM1="$(echo ${matrix1[@]} | cut -d " " -f $accessInd )"
    echo $entryM1
}

function getFromM2()
{
    rowInd=$(( ${1} - 1 ))
    accessInd=$((m2cols * $rowInd + ${2}))
    entryM2="$(echo ${matrix2[@]} | cut -d " " -f $accessInd )"
    echo $entryM2
}

function setM1RowsCols()
{
    m1rows=${#matrix1[@]}
    m1cols="$(echo ${matrix1[0]} | wc -w | cut -d " " -f 1)"
}

function setM2RowsCols()
{
    m2rows=${#matrix2[@]}
    m2cols="$(echo ${matrix2[0]} | wc -w | cut -d " " -f 1)"
}

function checkFileValidity()
{
    if [ ! -e ${1} ]; then
        echo "Error -- file does not exist" 1>&2
        exit 1
    fi
}

#check args and store matrices
case "${1}" in
    dims | transpose | mean)
        case "$#" in
            1)
                echo "Read from stdin"
                mapfile matrix1 #store matrix in array 
                setM1RowsCols
                ;;
            2)
                checkFileValidity ${2}
                echo "Read from file"
                mapfile -t matrix1 < ${2} #store matrix in array
                setM1RowsCols
                ;;
            *)
                echo "Error -- Too many Matrix arguments" 1>&2
                exit 1
                ;;
        esac
        ;;
    add | multiply)
        case "$#" in
            3)
                checkFileValidity ${2}
                checkFileValidity ${3} 
                echo "Read from file (good args)"
                mapfile -t matrix1 < ${2} #store matrix in array
                setM1RowsCols

                mapfile -t matrix2 < ${3} #store matrix in array
                setM2RowsCols
                ;;
            *) 
                echo "Error -- not enough matrix arguments for operation" 1>&2
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Error -- Invalid Operation Arg" 1>&2
        exit 1
        ;;
esac


#use func eval in hints to call funcs
