#!/bin/bash -e

#MATH HINTS:
#i = $((9+9))
#((i++))

#USAGE
# matrix operation m1 m2
# operation = ${1}
# m1file = ${2}
# m2file = ${3}

#USAGE: pass <row indice> <col indice> to set entryM1 (indexed at 1 !!) 
function getFromM1()
{
    rowInd=$(( ${1} - 1 ))
    accessInd=$((m1cols * $rowInd + ${2}))
    entryM1="$(echo ${matrix1[@]} | cut -d " " -f $accessInd )"
}

function getFromM2()
{
    rowInd=$(( ${1} - 1 ))
    accessInd=$((m2cols * $rowInd + ${2}))
    entryM2="$(echo ${matrix2[@]} | cut -d " " -f $accessInd )"
}

function setM1RowsCols()
{
    m1cols="$(echo ${matrix1[0]} | wc -w | cut -d " " -f 1)"
    m1rows="$(( $(echo ${matrix1[@]} | wc -w) / $m1cols ))"
}

function setM2RowsCols()
{
    m2cols="$(echo ${matrix2[0]} | wc -w | cut -d " " -f 1)"
    m2rows="$(( $(echo ${matrix2[@]} | wc -w) / $m2cols ))"
}

function checkFileValidity()
{
    if [ ! -e ${1} ]; then
        echo "Error -- file does not exist" 1>&2
        exit 1
    fi
}

function dims()
{
    echo "$m1rows $m1cols"
}

function transpose()
{
    for (( i=1;i<=$m1cols;i++ ))
    do
        temprow=$(printf "%s\n" "${matrix1[@]}" | cut -f $i | tr '\n' '\t')
        temprow=${temprow%?}
        echo -e "$temprow"
    done
}

function mean()
{
    for (( i=1;i<=$m1cols;i++ ))
    do  
        sum=0
        for (( j=1; j<=$m1rows;j++ ))
        do
            getFromM1 $j $i
            sum=$(($sum + $entryM1))
        done
        printf "%d" $(( ($sum + ($m1rows/2)*( ($sum>0)*2-1 )) / $m1rows ))
        if [ $i -ne $m1cols ]
        then
            printf "\t"
        fi
    done
    printf "\n"
}

function add()
{ 
    if [[ "$m1rows" != "$m2rows" || "$m1cols" != "$m2cols" ]]
    then
        echo "Error - add dims do not match." 1>&2
        exit 1
    fi
    
    for (( i=1;i<=$m1rows;i++ ))
    do
        for (( j=1;j<=$m2cols;j++ ))
        do
            getFromM1 $i $j
            getFromM2 $i $j
            printf "%d" $(($entryM1+$entryM2))
            if [ $j -ne $m2cols ]
            then
                printf "\t"
            fi
        done
        printf "\n"
    done 

}

#check args and store matrices
case "${1}" in
    dims | transpose | mean)
        case "$#" in
            1)
                #echo "Read from stdin"
                mapfile matrix1 #store matrix in array 
                setM1RowsCols
                ;;
            2)
                checkFileValidity ${2}
                #echo "Read from file"
                mapfile -t matrix1 < ${2} #store matrix in array
                setM1RowsCols
                ;;
            *)
                echo "Error -- Too many Matrix arguments" 1>&2
                exit 1
                ;;
        esac
        ;;
    add | multiply)
        case "$#" in
            3)
                checkFileValidity ${2}
                checkFileValidity ${3} 
                #echo "Read from file (good args)"
                mapfile -t matrix1 < ${2} #store matrix in array
                setM1RowsCols

                mapfile -t matrix2 < ${3} #store matrix in array
                setM2RowsCols
                ;;
            *) 
                echo "Error -- not enough matrix arguments for operation" 1>&2
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Error -- Invalid Operation Arg" 1>&2
        exit 1
        ;;
esac

$1 "${@:2}"
#use func eval in hints to call funcs
